stages:
  - build

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: '1'

ubuntu_24_04:
  stage: build
  image: docker:28.0.0
  services:
    - name: docker:dind-rootless
  tags:
    - MXL_dind
  parallel:
    matrix:
      - PRESET: ['Clang-Debug', 'Clang-Release', 'GCC-Debug', 'GCC-Release']
  before_script:
    - apk add bash
  script:
    - docker build -t mxl_build_container:$CI_JOB_ID $CI_PROJECT_DIR/.devcontainer/
    - docker run --rm --volume $CI_PROJECT_DIR/:/workspace/mxl --volume $CI_PROJECT_DIR/vcpkg_cache:/home/devcontainer/.cache/vcpkg -i mxl_build_container:$CI_JOB_ID cmake -S /workspace/mxl -B /workspace/mxl/build/Linux-$PRESET --preset Linux-$PRESET -DMXL_BUILD_NUMBER=$CI_PIPELINE_IID
    - docker run --rm --volume $CI_PROJECT_DIR/:/workspace/mxl --volume $CI_PROJECT_DIR/vcpkg_cache:/home/devcontainer/.cache/vcpkg -i mxl_build_container:$CI_JOB_ID cmake --build /workspace/mxl/build/Linux-$PRESET -t all doc install package
    - docker run --rm --volume $CI_PROJECT_DIR/:/workspace/mxl --volume $CI_PROJECT_DIR/vcpkg_cache:/home/devcontainer/.cache/vcpkg -i mxl_build_container:$CI_JOB_ID bash -c "cd /workspace/mxl/build/Linux-$PRESET && ctest --output-junit test-results.xml"
    - mv build/Linux-$PRESET/test-results.xml test-results-$PRESET.xml
  after_script:
    - docker rmi mxl_build_container:$CI_JOB_ID || true
  cache:
    paths:
      - vcpkg_cache
  artifacts:
    paths:
      - install/Linux-$PRESET/
      - build/Linux-$PRESET/*.deb
    reports:
      junit: test-results-$PRESET.xml

ubuntu_22_04:
  stage: build
  image: docker:28.0.0
  services:
    - name: docker:dind-rootless
  tags:
    - MXL_dind
  parallel:
    matrix:
      - PRESET: ['Clang-Debug', 'Clang-Release', 'GCC-Debug', 'GCC-Release']
  variables:
    IMAGE_VERSION: 22.04
  before_script:
    - apk add bash
  script:
    - docker build --build-arg BASE_IMAGE_VERSION=$IMAGE_VERSION --file $CI_PROJECT_DIR/.devcontainer/Dockerfile.ubuntu-legacy -t mxl_build_container:$CI_JOB_ID $CI_PROJECT_DIR/.devcontainer/
    - docker run --rm --volume $CI_PROJECT_DIR/:/workspace/mxl --volume $CI_PROJECT_DIR/vcpkg_cache:/home/devcontainer/.cache/vcpkg -i mxl_build_container:$CI_JOB_ID cmake -S /workspace/mxl -B /workspace/mxl/build/Linux-$PRESET --preset Linux-$PRESET -DMXL_BUILD_NUMBER=$CI_PIPELINE_IID
    - docker run --rm --volume $CI_PROJECT_DIR/:/workspace/mxl --volume $CI_PROJECT_DIR/vcpkg_cache:/home/devcontainer/.cache/vcpkg -i mxl_build_container:$CI_JOB_ID cmake --build /workspace/mxl/build/Linux-$PRESET -t all doc install package
    - docker run --rm --volume $CI_PROJECT_DIR/:/workspace/mxl --volume $CI_PROJECT_DIR/vcpkg_cache:/home/devcontainer/.cache/vcpkg -i mxl_build_container:$CI_JOB_ID bash -c "cd /workspace/mxl/build/Linux-$PRESET && ctest --output-junit test-results.xml"
    - mv build/Linux-$PRESET/test-results.xml test-results-$PRESET.xml
  after_script:
    - docker rmi mxl_build_container:$CI_JOB_ID || true
  cache:
    paths:
      - vcpkg_cache
  artifacts:
    paths:
      - install/Linux-$PRESET/
      - build/Linux-$PRESET/*.deb
    reports:
      junit: test-results-$PRESET.xml

ubuntu_20_04:
  stage: build
  image: docker:28.0.0
  services:
    - name: docker:dind-rootless
  tags:
    - MXL_dind
  parallel:
    matrix:
      - PRESET: ['Clang-Debug', 'Clang-Release', 'GCC-Debug', 'GCC-Release']
  variables:
    IMAGE_VERSION: 20.04
  before_script:
    - apk add bash
  script:
    - docker build --build-arg BASE_IMAGE_VERSION=$IMAGE_VERSION --file $CI_PROJECT_DIR/.devcontainer/Dockerfile.ubuntu-legacy -t mxl_build_container:$CI_JOB_ID $CI_PROJECT_DIR/.devcontainer/
    - docker run --rm --volume $CI_PROJECT_DIR/:/workspace/mxl --volume $CI_PROJECT_DIR/vcpkg_cache:/home/devcontainer/.cache/vcpkg -i mxl_build_container:$CI_JOB_ID cmake -S /workspace/mxl -B /workspace/mxl/build/Linux-$PRESET --preset Linux-$PRESET -DMXL_BUILD_NUMBER=$CI_PIPELINE_IID
    - docker run --rm --volume $CI_PROJECT_DIR/:/workspace/mxl --volume $CI_PROJECT_DIR/vcpkg_cache:/home/devcontainer/.cache/vcpkg -i mxl_build_container:$CI_JOB_ID cmake --build /workspace/mxl/build/Linux-$PRESET -t all doc install package
    - docker run --rm --volume $CI_PROJECT_DIR/:/workspace/mxl --volume $CI_PROJECT_DIR/vcpkg_cache:/home/devcontainer/.cache/vcpkg -i mxl_build_container:$CI_JOB_ID bash -c "cd /workspace/mxl/build/Linux-$PRESET && ctest --output-junit test-results.xml"
    - mv build/Linux-$PRESET/test-results.xml test-results-$PRESET.xml
  after_script:
    - docker rmi mxl_build_container:$CI_JOB_ID || true
  cache:
    paths:
      - vcpkg_cache
  artifacts:
    paths:
      - install/Linux-$PRESET/
      - build/Linux-$PRESET/*.deb
    reports:
      junit: test-results-$PRESET.xml
